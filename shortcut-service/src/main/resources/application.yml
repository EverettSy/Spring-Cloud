server:
  port: 8202
spring:
  application:
    name: shortcut-service
  main:
    allow-bean-definition-overriding: true
  jackson:
     date-format: yyyy-MM-dd HH:mm:ss
     time-zone: GMT+8
  datasource:
    url: jdbc:mysql://127.0.0.1:3306/spring_cloud?characterEncoding=utf8&serverTimezone=UTC
    username: appuser
    password: 123456
    driver-class-name: com.mysql.cj.jdbc.Driver
    type: com.alibaba.druid.pool.DruidDataSource
  redis:
    host: 47.97.166.67
    port: 6379
    password: 'sy199520'
    timeout: 4000
    database: 2
    lettuce:
      pool:
        max-active: 200 #连接池最大连接数（使用负值表示没有限制）
        max-idle: 20 #连接池中的最大空闲连接
        min-idle: 5 #连接池中的最小空闲连接
        # 这里在IDEA中显示红色错误，不用管，因为org.springframework.boot.autoconfigure.data.redis.RedisProperties.Pool.setMaxWait(Duration maxWait)
        # 方法参数是Duration，IDEA无法识别，但是会自动注入成功
        max-wait: 2000  # 当连接池耗尽时，抛出异常之前，连接分配被阻塞的时间，也就是连接池满后最长等待时间，负值表示无限期等待
  redis2:
    host: 47.97.166.67
    port: 6379
    password: 'sy199520'
    database: 1
  #mongodb配置
#  data:
#    mongodb:
#      uri: mongodb://chaoke:admin@192.168.0.157:27017/ck_dev
  # Kafka
  kafka:
    bootstrap-servers: 47.97.166.67:9092 #(kafka生产集群ip+port端口)
    producer:
      buffer-memory: 40960
      retries: 0
      batch-size: 4096
      properties:
        linger.ms: 1
    consumer:
      enable-auto-commit: true #(是否自动提交)
      auto-commit-interval: 100ms
      auto-offset-reset: latest #(实时生产，实时消费，不会从头开始消费)
      group-id: sycloudGroup1 #(消费组)
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:8001/eureka/
    healthcheck:
      enabled: true
  instance:
    status-page-url: http://${spring.cloud.client.ip-address}:${server.port}/swagger-ui/index.html#/
    #Eureka Client 发送心跳给 server 端的频率 默认30秒
    lease-renewal-interval-in-seconds: 5
    #Eureka Server 至上一次收到 client 的心跳之后，等待下一次心跳的超时时间，在这个时间内若没收到下一次心跳，则移除该 Instance。默认90秒
    lease-expiration-duration-in-seconds: 5

# mybatis-plus配置
mybatis-plus:
  mapper-locations: classpath:/mapper/*Mapper.com.syraven.cloud.core.mybatis.xml
  type-aliases-package: com.syraven.cloud.domain
  global-config:
    # 数据库相关配置
    db-config:
      #主键类型  AUTO:"数据库ID自增", INPUT:"用户输入ID",ID_WORKER:"全局唯一ID (数字类型唯一ID)", UUID:"全局唯一ID UUID";
      id-type: AUTO
      #字段策略 IGNORED:"忽略判断",NOT_NULL:"非 NULL 判断"),NOT_EMPTY:"非空判断"
      field-strategy: NOT_NULL
      #驼峰下划线转换
      column-underline: true
      #数据库大写下划线转换
      #capital-mode: true
      #逻辑删除配置
      logic-delete-value: 1 # 逻辑已删除值(默认为 1)
      logic-not-delete-value: 0 # 逻辑未删除值(默认为 0)
      db-type: mysql
      #刷新mapper 调试神器
      refresh: true
    # 原生配置
  configuration:
    map-underscore-to-camel-case: true
    cache-enabled: false
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl

# 配置这些主要是将actuator相关接口暴露出来。
management:
  endpoint:
    health:
      show-details: always #显示健康详情
    shutdown:
      enabled: true # 开启shutdown端点访问
  endpoints:
    jmx:
      exposure:
        exclude: "*"
    web:
      exposure:
        include: "*"

productDetailCouponCache:
  begin: 1
  end: 2

# ===== 自定义swagger配置 ===== #
swagger:
  enable: true
  application-name: ${spring.application.name}
  application-version: 1.0
  application-description:
  try-host: http://localhost:${server.port}

# 配置域名，如果没有配，则默认是本地ip
common:
  domain: http://syRobin.com


jwt:
  config:
    key: nsx-lambert
    ttl: 360000

seata:
  tx-service-group: my_test_tx_group
  service:
    vgroup-mapping:
      my_test_tx_group: seata-server # 此处配置对应Server端配置registry.eureka.application的值
  registry:
    type: eureka
    eureka:
      service-url: http://localhost:8001/eureka/
      weight: 1
